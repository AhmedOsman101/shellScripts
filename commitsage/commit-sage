#!/usr/bin/env bash

# shellcheck disable=SC2310
# disable hinting that invoking functions inside an if statement disables -e flag

set -eo pipefail

trap 'exit 1' SIGUSR1

is-git-repo

readonly scriptName="$(basename $0)"
readonly scriptDir="$(dirname $0)"

if [[ -z ${COMMIT_SAGE_CONFIG_PATH} || ! -f ${COMMIT_SAGE_CONFIG_PATH} ]]; then
  readonly configFile="${scriptDir}/config.json"
  # log-debug "no config found"
  # log-debug "using default config: '${configFile}'"
else
  readonly configFile="${COMMIT_SAGE_CONFIG_PATH}"
fi

readonly onlyStaged=$(jq -r ".onlyStaged" ${configFile})
readonly repoPath="$(git-root)"
readonly STAGED_STATUS_CODES=("M" "A" "D" "R")

readonly dataFile=$(mktemp -t commit-sage-XXXXX.json)
trap 'rm -rf "$dataFile"' EXIT

declare -a blameInfos diffs
declare -A GIT_STATUS_CODES STAGED_CODES_MAP

for code in "${STAGED_STATUS_CODES[@]}"; do
  STAGED_CODES_MAP["${code}"]=1
done

GIT_STATUS_CODES[modified]="M"
GIT_STATUS_CODES[added]="A"
GIT_STATUS_CODES[deleted]="D"
GIT_STATUS_CODES[renamed]="R"
GIT_STATUS_CODES[untracked]="??"
GIT_STATUS_CODES[submodule]="S"

catfile() {
  bat --pager never --style plain "$@"
}

hasChanges() {
  local type=${1:-unstaged}

  case "${type}" in
  staged)
    output=$(git diff --cached --name-only)
    ;;
  untracked)
    output=$(git ls-files --others --exclude-standard)
    ;;
  deleted)
    output=$(git ls-files --deleted)
    ;;
  unstaged)
    output=$(git diff --name-only)
    ;;
  ? | *)
    log-error "Invalid change type: ${type}"
    ;;
  esac
  # output.length > 0
  output=$(trim "${output}")

  # True (0) if output is non-empty
  if [[ ${#output} -gt 0 ]]; then
    echo 0
  else
    echo 1
  fi
}

hasHead() {
  git rev-parse HEAD >/dev/null 2>&1 && return 0 || return 1
}

# Simple hash function mimicking TypeScript's calculateFileHash
calculateFileHash() {
  local content="$1"
  # Convert content to base64 and take first 7 characters
  echo -n "${content}" | base64 | head -c 7
}

isSubModule() {
  if git ls-files --stage -- $1 | rg -q "160000"; then
    return 0
  else
    return 1
  fi
}

processStagedOnly() {
  local output stagedFiles=()
  # Get staged files
  output=$(git diff --cached --name-only)

  # Check if git command succeeded
  [[ $? -ne 0 ]] && log-error "Error: Git command failed"

  mapfile -t lines <<<"${output}"
  for line in "${lines[@]}"; do
    trimmed=$(trim "${line}")
    if [[ -n "${trimmed}" ]]; then
      stagedFiles+=("${trimmed}")
    fi
  done

  for file in "${stagedFiles[@]}"; do
    if ! isSubModule "file"; then
      local fileDiff=$(git diff --cached -- ${file})
      trimmed=$(trim "${fileDiff}")
      if [[ -n "${trimmed}" ]]; then
        diffs+=("${trimmed}")
      fi
    fi
  done
}

processStaged() {
  local output stagedFiles=()
  # Get staged files
  output=$(git diff --cached --name-only)

  # Check if git command succeeded
  [[ $? -ne 0 ]] && log-error "Error: Git command failed"

  mapfile -t lines <<<"${output}"
  for line in "${lines[@]}"; do
    trimmed=$(trim "${line}")
    if [[ -n "${trimmed}" ]]; then
      stagedFiles+=("${trimmed}")
    fi
  done

  # Generate diff for each staged file
  for file in "${stagedFiles[@]}"; do
    if ! isSubModule "file"; then
      local fileDiff=$(git diff --cached -- ${file})
      trimmed=$(trim "${fileDiff}")
      if [[ -n "${trimmed}" ]]; then
        diffs+=($'# Staged changes:\n'"${trimmed}")
      fi
    fi
  done
}

processUnstaged() {
  local output unstagedFiles=() unstagedDiffs=()
  # Get staged files
  output=$(git diff --name-only)

  # Check if git command succeeded
  [[ $? -ne 0 ]] && log-error "Error: Git command failed"

  mapfile -t lines <<<"${output}"
  for line in "${lines[@]}"; do
    trimmed=$(trim "${line}")
    if [[ -n "${trimmed}" ]]; then
      unstagedFiles+=("${trimmed}")
    fi
  done

  # Generate diff for each unstaged file
  for file in "${unstagedFiles[@]}"; do
    if ! isSubModule "file"; then
      local fileDiff=$(git diff -- ${file})
      trimmed=$(trim "${fileDiff}")
      if [[ -n "${trimmed}" ]]; then
        diffs+=($'# Unstaged changes:\n'"${trimmed}")
      fi
    fi
  done

}

processUntracked() {
  local output untrackedFiles=() untrackedDiff=()

  # Get untracked files
  output=$(git ls-files --others --exclude-standard)
  [[ $? -ne 0 ]] && log-error "Error: Git command failed"

  # Split output into array and filter non-empty lines
  mapfile -t lines <<<"${output}"
  for line in "${lines[@]}"; do
    trimmed=$(trim "${line}")
    if [[ -n "${trimmed}" ]]; then
      untrackedFiles+=("${trimmed}")
    fi
  done

  # Generate diff for each untracked file
  for file in "${untrackedFiles[@]}"; do
    local diffContent=""
    if content=$(cat "${file}" 2>/dev/null); then
      # Read file content succeeded
      mapfile -t contentLines <<<"${content}"
      local contentDiff=()
      for line in "${contentLines[@]}"; do
        contentDiff+=("+${line}")
      done
      # Join contentDiff with newlines
      contentDiffText=$(printf '%s\n' "${contentDiff[@]}")
      local hash=$(calculateFileHash "${content}")
      local lineCount=${#contentLines[@]}
      diffContent=$(echo -e "diff --git a/${file} b/${file}\nnew file mode 100644\nindex 0000000..${hash}\n--- /dev/null\n+++ b/${file}\n@@ -0,0 +1,${lineCount} @@\n${contentDiffText}")
    else
      diffContent=""
      log-error "Error reading new file ${file}"
    fi
    # Add to untrackedDiff array
    untrackedDiff+=("${diffContent}")
  done

  # Filter valid diffs and add to diffs array if non-empty
  local validUntrackedDiffs=()
  for diff in "${untrackedDiff[@]}"; do
    trimmed=$(trim "${diff}")
    if [[ -n "${trimmed}" ]]; then
      validUntrackedDiffs+=("${trimmed}")
    fi
  done

  if [[ ${#validUntrackedDiffs[@]} -gt 0 ]]; then
    diffs+=($'# New files:\n'"$(printf '%s\n' "${validUntrackedDiffs[@]}")")
  fi
}

processDeleted() {
  local output deletedFiles=() deletedDiff=()

  # Get deleted files
  output=$(git ls-files --deleted)
  [[ $? -ne 0 ]] && log-error "Error: Git command failed"

  # Split output into array and filter non-empty lines
  mapfile -t lines <<<"${output}"
  for line in "${lines[@]}"; do
    trimmed=$(trim "${line}")
    if [[ -n "${trimmed}" ]]; then
      deletedFiles+=("${trimmed}")
    fi
  done

  # Generate diff for each deleted file
  for file in "${deletedFiles[@]}"; do
    local diffContent=""
    if oldContent=$(git show HEAD:${file}); then
      diffContent=$(echo -e "diff --git a/${file} b/${file}\ndeleted file mode 100644\n--- a/${file}\n+++ /dev/null\n@@ -1 +0,0 @@\n-$(trim ${oldContent})\n")
    else
      diffContent=""
      log-error "Error reading new file ${file}"
    fi

    # Add to untrackedDiff array
    deletedDiff+=("${diffContent}")
  done

  # Filter valid diffs and add to diffs array if non-empty
  local validDeletedDiffs=()
  for diff in "${deletedDiff[@]}"; do
    trimmed=$(trim "${diff}")
    if [[ -n "${trimmed}" ]]; then
      validDeletedDiffs+=("${trimmed}")
    fi
  done

  if [[ ${#validDeletedDiffs[@]} -gt 0 ]]; then
    local temp=$'# Deleted files:\n'"$(printf '%s\n' "${validDeletedDiffs[@]}")"
    diffs+=("${temp}") # Append as a single element
  fi

}

getDiff() {
  local HasHead
  hasHead
  # 0 => True, 1 => False (e.g. empty repo)
  HasHead=$?

  # 0 => True, 1 => False
  hasStagedChanges=$(hasChanges "staged")

  # Only check unstaged if !onlyStaged
  if [[ "${onlyStaged}" != "true" ]] && [[ $(hasChanges "unstaged") -eq 0 ]]; then
    hasUnstagedChanges=0 # True
  # if no staged changes but there is changes in general
  elif [[ ${hasStagedChanges} -eq 1 ]] && [[ $(hasChanges "unstaged") -eq 0 ]]; then
    hasUnstagedChanges=0 # True
  else
    hasUnstagedChanges=1 # False
  fi

  # Only check untracked if !onlyStaged && !hasStagedChanges
  if [[ "${onlyStaged}" != "true" ]] &&
    [[ "${hasStagedChanges}" -eq 1 ]] &&
    [[ $(hasChanges "untracked") -eq 0 ]]; then
    hasUntrackedFiles=0 # True
  elif [[ ${hasStagedChanges} -eq 1 ]] && [[ $(hasChanges "untracked") -eq 0 ]]; then
    hasUntrackedFiles=0 # True
  else
    hasUntrackedFiles=1 # False
  fi

  # Only check deleted if hasHead && !onlyStaged && !hasStagedChanges
  if [[ "${HasHead}" -eq 0 ]] &&
    [[ "${onlyStaged}" != "true" ]] &&
    [[ "${hasStagedChanges}" -eq 1 ]] &&
    [[ $(hasChanges "deleted") -eq 0 ]]; then

    hasDeletedFiles=0 # True
  elif [[ "${HasHead}" -eq 0 ]] &&
    [[ ${hasStagedChanges} -eq 1 ]] &&
    [[ $(hasChanges "deleted") -eq 0 ]]; then
    hasDeletedFiles=0 # True
  else
    hasDeletedFiles=1 # False
  fi

  # Log results for debugging
  # log-debug "hasHead: ${HasHead}"
  # log-debug "hasStagedChanges: ${hasStagedChanges}"
  # log-debug "hasUnstagedChanges: ${hasUnstagedChanges}"
  # log-debug "hasUntrackedFiles: ${hasUntrackedFiles}"
  # log-debug "hasDeletedFiles: ${hasDeletedFiles}"

  # Check if no changes exist (all are false, i.e., 1)
  if [[ "${hasStagedChanges}" -eq 1 ]] &&
    [[ "${hasUnstagedChanges}" -eq 1 ]] &&
    [[ "${hasUntrackedFiles}" -eq 1 ]] &&
    [[ "${hasDeletedFiles}" -eq 1 ]]; then
    log-error "No Changes Found"
  fi

  # ---- Diffs ---- #
  # ---- If we only want staged changes and there are some, return only those ---- #
  if [[ "${onlyStaged}" == "true" ]] && [[ "${hasStagedChanges}" -eq 0 ]]; then
    processStagedOnly
  else
    # ---- Otherwise, get all changes ---- #
    if [[ "${hasStagedChanges}" -eq 0 ]]; then
      processStaged
    fi

    if [[ "${hasUnstagedChanges}" -eq 0 ]]; then
      processUnstaged
    fi

    if [[ "${hasUntrackedFiles}" -eq 0 ]]; then
      processUntracked
    fi

    if [[ "${hasDeletedFiles}" -eq 0 ]]; then
      processDeleted
    fi

  fi

  combinedDiff=$(printf "%s\n\n" "${diffs[@]}" | trim)
  [[ -z "${combinedDiff}" ]] && log-error "No Changes Found"
  echo -e "${combinedDiff}"
}

getChangedFiles() {
  local useStagedChanges output changedFiles=() outputArray=()
  useStagedChanges="$1"
  output=$(git status --porcelain)

  # Split output into array and filter non-empty lines
  mapfile -t lines <<<"${output}"
  for line in "${lines[@]}"; do
    trimmed=$(trim "${line}")
    if [[ -n "${trimmed}" ]]; then
      changedFiles+=("${trimmed}")
    fi
  done

  # Filter valid diffs and add to diffs array if non-empty
  local validChangedFiles=()
  for file in "${changedFiles[@]}"; do
    # suppresses output
    if printf '%s' "${file}" | rg -q "Subproject commit|Entering"; then
      continue
    fi

    if [[ "${useStagedChanges}" == "true" ]]; then
      # For staged changes, check first character
      firstChar="${file:0:1}"
      if [[ -n "${STAGED_CODES_MAP[${firstChar}]}" ]]; then
        validChangedFiles+=("${file}")
        continue
      fi
    fi

    # For all changes, check both staged and unstaged status
    staged="${file:0:1}"
    unstaged="${file:1:2}"
    [[ "${staged}" != " " || "${unstaged}" != " " ]] && validChangedFiles+=("${file}")
  done

  local finalOutput=()
  for item in "${validChangedFiles[@]}"; do
    status="${item:0:2}"
    filePath=$(trim "${item:2}")

    # Handle renamed files (they have format "R100 old-name -> new-name")
    if echo "${status}" | rg '^R' -q; then
      filePath=$(echo "${filePath}" | awk -F ' -> ' '{ print $2 }' | trim)
    fi

    # Append relative path as git status returns it
    finalOutput+=("${filePath}")
  done

  printf '%s\n' "${finalOutput[@]}"
}

normalizePath() {
  local filePath
  filePath=$1
  realpath -m --relative-to="${repoPath}" ${filePath}
}

resolvePath() {
  local filePath
  filePath=$1
  realpath -m "${filePath}"
}

isFileDeleted() {
  local filePath output status
  filePath=$1
  normalizedPath=$(normalizePath ${filePath})

  output=$(git status --porcelain ${normalizedPath})
  status=${output:0:2}

  [[ "${status}" == " D" || "${status}" == "D " ]] && return 0 || return 1
}

isNewFile() {
  local filePath output status
  filePath=$1
  normalizedPath=$(normalizePath ${filePath})

  output=$(git status --porcelain ${normalizedPath})
  status=${output:0:2}

  [[ "${status}" == "??" || "${status}" == "A " ]] && return 0 || return 1
}

executeGitBlame() {
  local filePath
  filePath=$1
  git blame --line-porcelain "${filePath}"
}

parseBlameOutput() {
  local input author email timestamp date line commit
  local -A currentBlame=()
  input="$1"
  mapfile -t lines <<<"${input}"
  for _line in "${lines[@]}"; do
    if echo "${_line}" | rg -q "^author "; then
      author="${_line:7}"
    elif echo "${_line}" | rg -q "^author-mail "; then
      email=$(echo "${_line:12}" | tr -d '<>')
    elif echo "${_line}" | rg -q "^author-time "; then
      timestamp="${_line:11}"
      date=$(date -d "@${timestamp}" --iso-8601=seconds --utc)
    elif echo "${_line}" | rg -q "^\t"; then
      line="${_line:1}"

      if [[ 
        -n ${author} && -n ${email} &&
        -n ${timestamp} && -n ${date} &&
        -n ${line} ]]; then

        currentBlame=(
          [author]="${author}"
          [email]="${email}"
          [timestamp]="${timestamp}"
          [date]="${date}"
          [line]="${line}"
        )

        # Build dynamic jq arguments
        local -a jq_args=()
        for key in "${!currentBlame[@]}"; do
          jq_args+=(--arg "${key}" "${currentBlame[${key}]}")
        done

        # Update JSON file
        tempfile=$(mktemp -t XXXXX.json)
        jq "${jq_args[@]}" '.blameInfos += [$ARGS.named]' "${dataFile}" >"${tempfile}"
        mv "${tempfile}" "${dataFile}"

        # Reset currentBlame
        currentBlame=()
      fi
    elif echo "${_line}" | rg -q '^[0-9a-f]{40}'; then
      currentBlame[commit]=$(echo "${_line}" | awk '{ print $1 }')
    fi

  done
  # Debug: Show all data
  # catfile "${dataFile}"

}

getGitBlame() {
  local filePath
  filePath=$1
  absoluteFilePath=$(resolvePath ${filePath})

  [[ ! -f "${absoluteFilePath}" ]] && log-error "File not found: ${absoluteFilePath}"

  if ! hasHead; then
    log-error "Repository has no commits yet"
  fi

  if isNewFile "${filePath}"; then
    log-error "File has not been committed yet"
  fi

  blameOutput=$(executeGitBlame "${filePath}")

  parseBlameOutput "${blameOutput}"
}

parseChangedLines() {
  local input lines currentLine _changedLines=()
  input=$1
  currentLine=0

  mapfile -t lines <<<${input}
  for line in "${lines[@]}"; do
    if match=$(echo "${line}" | rg "^@@ -\d+(?:,\d+)? \+(\d+)(?:,\d+)? @@"); then
      currentLine=1
    elif echo "${line}" | rg -q "^(\+[^\+].*)"; then
      _changedLines+=($((currentLine)))
      currentLine=$((currentLine + 1))
    elif echo "${line}" | rg -qv "^(---|-)"; then
      currentLine=$((currentLine + 1))
    fi
  done

  # Remove any duplicates
  _changedLines=($(echo "${_changedLines[*]}" | no-dups -s))
  echo "${_changedLines[@]}"
}

analyzeBlameInfo() {
  local -a ___changedLines=("$@") # Array of changed line numbers passed as arguments
  local changedLinesJson authorChangesJson

  # Convert the Bash array of changed lines to a JSON array
  changedLinesJson=$(printf '%s\n' "${___changedLines[@]}" | jq -s '.')

  # Use jq to analyze blameInfos, filtering by changed lines and grouping by author
  authorChangesJson=$(jq --argjson changedLines "${changedLinesJson}" -f "${scriptDir}/script.jq" "${dataFile}")
  echo ${authorChangesJson} >test.json

  local tempfile=$(mktemp -t XXXXX.json)
  jq --argjson authorChanges "${authorChangesJson}" '.authorChanges += $authorChanges' "${dataFile}" >"${tempfile}"
  mv "${tempfile}" "${dataFile}"
}

formatAnalysis() {
  local authorChangesJson
  authorChangesJson="$(jq '.authorChanges' "${dataFile}")"
  # Check if the JSON object is empty
  if [[ "$(echo "${authorChangesJson}" | jq 'length')" -eq 0 ]]; then
    echo "No changes detected."
    return
  fi

  echo "${authorChangesJson}" | jq .

  # Use jq to sort and format the author changes
  local formattedOutput
  formattedOutput=$(echo "${authorChangesJson}" | jq -r '
    # Convert object to array of [key, value] pairs
    to_entries
    # Sort by count in descending order
    | sort_by(.value.count) | reverse
    # Format each entry
    | map(
      "\(.key) modified \(.value.count) line" +
      (if .value.count == 1 then "" else "s" end) +
      " (\(.value.lines | join(", ")))"
    )
    # Join with newlines
    | join("\n")
  ')

  echo "${formattedOutput}" | jq '.'
}

analyzeChanges() {
  local filePath output status blame __changedLines=()
  filePath=$1
  normalizedPath=$(normalizePath ${filePath})

  # First check if file is deleted or new, as these don't need blame analysis
  # Use git status to check file state
  output=$(git status --porcelain ${normalizedPath})
  status=${output:0:2}

  # shellcheck disable=SC2249
  case "${status}" in
  ' D' | 'D ')
    # log-debug "Skipping blame analysis for deleted file: ${normalizedPath}"
    echo "Deleted file: ${normalizedPath}"
    return 0
    ;;
  '??' | 'A ')
    # log-debug "Skipping blame analysis for new file: ${normalizedPath}"
    echo "New file: ${normalizedPath}"
    return 0
    ;;
  esac

  # For existing files, we need to get blame info
  getGitBlame "${normalizedPath}" # set blameInfos

  diff=$(git diff --unified=0 -- ${normalizedPath})
  # log-debug "diff\n${diff}"

  __changedLines=($(parseChangedLines "${diff}"))
  # log-debug "${changedLines[@]}"

  # authorChanges=$(analyzeBlameInfo "${__changedLines[@]}")
  analyzeBlameInfo "${__changedLines[@]}"
  # formatAnalysis
}

main() {
  # local -a blameAnalysis=()
  local hasStagedChanges useStagedChanges diff blameAnalysis
  # Ensure the file exists with an empty object if not present
  [[ -f "${dataFile}" ]] && echo "{}" >"${dataFile}"

  cd "${repoPath}" || log-error "Unable to open your git repo's root directory"

  hasStagedChange=$(hasChanges "staged")

  if [[ "${onlyStaged}" == "true" ]] || [[ "${hasStagedChanges}" -eq 0 ]]; then
    useStagedChanges="true"
  else
    useStagedChanges="false"
  fi

  # log-debug "useStagedChanges: ${useStagedChanges}"

  diff=$(getDiff)

  [[ -z "${diff}" ]] && log-error "No changes to commit"

  # local changedFiles=$(getChangedFiles)
  mapfile -t changedFiles <<<"$(getChangedFiles "${useStagedChanges}")"

  # printf '%s\n' "${changedFiles[@]}"
  for file in "${changedFiles[@]}"; do
    temp="$(analyzeChanges "${file}")"
    if [[ -n "${temp}" ]]; then
      blameAnalysis+="${temp};"
    fi
  done
  printf '%s\n' "${blameAnalysis[@]}"

  # Testing
  # analyzeChanges "file.txt"
}

main
