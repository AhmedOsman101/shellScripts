#!/usr/bin/env bash
#
# --- SCRIPT SIGNATURE --- #
#
#                                                    ▄▄▄▄
#                                                    ▀▀██                            ██                  ██
#  ██▄  ▄██   ▄████▄    ██▄████   ▄█████▄   ▄████▄     ██                ▄▄█████▄  ███████    ▄█████▄  ███████   ██    ██  ▄▄█████▄
#   ██  ██   ██▄▄▄▄██   ██▀      ██▀    ▀  ██▄▄▄▄██    ██                ██▄▄▄▄ ▀    ██       ▀ ▄▄▄██    ██      ██    ██  ██▄▄▄▄ ▀
#   ▀█▄▄█▀   ██▀▀▀▀▀▀   ██       ██        ██▀▀▀▀▀▀    ██       █████     ▀▀▀▀██▄    ██      ▄██▀▀▀██    ██      ██    ██   ▀▀▀▀██▄
#    ████    ▀██▄▄▄▄█   ██       ▀██▄▄▄▄█  ▀██▄▄▄▄█    ██▄▄▄             █▄▄▄▄▄██    ██▄▄▄   ██▄▄▄███    ██▄▄▄   ██▄▄▄███  █▄▄▄▄▄██
#     ▀▀       ▀▀▀▀▀    ▀▀         ▀▀▀▀▀     ▀▀▀▀▀      ▀▀▀▀              ▀▀▀▀▀▀      ▀▀▀▀    ▀▀▀▀ ▀▀     ▀▀▀▀    ▀▀▀▀ ▀▀   ▀▀▀▀▀▀
#
#
# --- DESCRIPTION --- #
# Shows the latest n deployments on Vercel
# --- DEPENDENCIES --- #
# - curl
# - jq
# - gum
# - nu (nushell)
# --- END SIGNATURE --- #

set -eo pipefail
trap 'exit 1' SIGUSR1

eval "$(include "lib/helpers.sh")"
eval "$(include "lib/cmdarg.sh")"
eval "$(include "check-deps")"

checkDeps "$0"
cmdarg_info "header" "$(get-desc "$0")"
# ---  Main script logic --- #

cmdarg "l?" "limit" "Limit the number of deployments to show, defaults to the latest deployment" "1"

cmdarg_parse "$@"

limit=${cmdarg_cfg['limit']}

READY="$(printGreen -n '●') Ready"
ERROR="$(printRed -n '●') Error"
BUILDING="$(printYellow -n '●') Building"

AUTH_HEADER="Authorization: Bearer $(pass show vercel/token)"

response=$(
  gum spin \
    --title "Fetcheng..." \
    --title.foreground="${U_GREEN}" \
    -- curl -sH "${AUTH_HEADER}" "https://api.vercel.com/v6/deployments?limit=${limit}"
)
now=$(date +"%s")

parseJson() {
  local record
  record=$(echo "$1" | jq .)
  readyAt=$(echo "${record}" | jq -r '.ready')

  age=$(sec2time $((now - (readyAt / 1000))) --short | awk '{print $1}')
  projectName=$(echo "${record}" | jq -r '.name')
  inspectorUrl=$(echo "${record}" | jq -r '.inspectorUrl')
  username=$(echo "${record}" | jq -r '.creator.username')

  status=$(echo "${record}" | jq -r '.state' | trim)
  case "${status}" in
  'READY')
    status="${READY}"
    ;;
  'BUILDING')
    status="${BUILDING}"
    ;;
  'ERROR')
    status="${ERROR}"
    ;;
  *)
    log-error "Invalid status: '${status}'"
    ;;
  esac

  echo '{}' | jq -c \
    --arg age "${age}" \
    --arg name "${projectName}" \
    --arg username "${username}" \
    --arg status "${status}" \
    --arg url "${inspectorUrl}" \
    '{"Age": $age, "Project Name": $name, "Username": $username, "Status": $status, "Url": $url}'

}

# Check if limit is positive. Original check was > 1, which skipped limit=1 case.
if ((limit > 0)); then
  arr='[]'

  for i in $(seq 0 $((limit - 1))); do
    dep=$(echo "${response}" | jq ".deployments[${i}]")
    # Basic check if deployment data exists at this index
    if [[ -z "${dep}" || "${dep}" == "null" ]]; then
      log-warning "No deployments found at index ${i}"
      continue # Skip this iteration
    fi
    record_json=$(parseJson "$(echo "${dep}" | jq .)")
    # Convert the record JSON string to a jq value
    record=$(echo "${record_json}" | jq -c .)
    # Append the record to the array
    arr=$(echo "${arr}" | jq ". + [${record}]")
  done

  # Check if any records were actually added
  if [[ "${arr}" != "[]" ]]; then
    count=$(echo "${arr}" | jq '. | length')

    if [[ ${count} -eq 1 ]]; then
      # escape all ansi characters in status, show no index
      n "echo '${arr}' | from json | update Status { |row| \$row.Status | str replace -a '\e' (char -u '001b') } | ansi link Url --text 'Inspect' | table --index false --expand"
    else
      # escape all ansi characters in status
      n "echo '${arr}' | from json | update Status { |row| \$row.Status | str replace -a '\e' (char -u '001b') } | ansi link Url --text 'Inspect' | table --expand"
    fi
  else
    log-error "No deployment data processed or appended."
  fi
else
  log-warning "Limit is set to ${limit}. No deployments requested."
  exit 1
fi
