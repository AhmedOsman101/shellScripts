#!/usr/bin/env bash

# --- SCRIPT SIGNATURE --- #
#
#                                                                 ██
#                        ██                                       ▀▀
#   ▄███▄██   ▄████▄   ███████             ██    ██  ██▄████▄   ████      ▄███▄██  ██    ██   ▄████▄
#  ██▀  ▀██  ██▄▄▄▄██    ██                ██    ██  ██▀   ██     ██     ██▀  ▀██  ██    ██  ██▄▄▄▄██
#  ██    ██  ██▀▀▀▀▀▀    ██       █████    ██    ██  ██    ██     ██     ██    ██  ██    ██  ██▀▀▀▀▀▀
#  ▀██▄▄███  ▀██▄▄▄▄█    ██▄▄▄             ██▄▄▄███  ██    ██  ▄▄▄██▄▄▄  ▀██▄▄███  ██▄▄▄███  ▀██▄▄▄▄█
#   ▄▀▀▀ ██    ▀▀▀▀▀      ▀▀▀▀              ▀▀▀▀ ▀▀  ▀▀    ▀▀  ▀▀▀▀▀▀▀▀    ▀▀▀ ██   ▀▀▀▀ ▀▀    ▀▀▀▀▀
#   ▀████▀▀                                                                    ██
#
# --- DESCRIPTION --- #
# Filters unique lines that appear once in a file or stdin, with options for backup and array output
# --- DEPENDENCIES --- #
# - awk
# --- END SIGNATURE --- #

set -eo pipefail

trap 'exit 1' SIGUSR1

source cmdarg.sh

source check-deps
checkDeps "$0"
# ---  Main script logic --- #
cmdarg_info "header" "$(get-desc $0)"

cmdarg "b" "backup" "Creates a backup .bak file of the original file"
cmdarg "f" "force" "Overwrite the original file without cofirmation"
cmdarg "a" "array" "Returns the output as a bash compatible array"
cmdarg "q" "quiet" "Runs quietly without output on success"

cmdarg_parse "$@"

useBackup=${cmdarg_cfg['backup']}
force=${cmdarg_cfg['force']}
useArray=${cmdarg_cfg['array']}
quiet=${cmdarg_cfg['quiet']}

# Function to process input and remove duplicates
remove_duplicates() {
  if [[ ${useArray} == true ]]; then
    tr ' ' '\n' |
      awk '
    {
      count[$0]++
      lines[NR] = $0
    }
    END {
      for (i = 1; i <= NR; i++) {
        if (count[lines[i]] == 1) print lines[i]
      }
    }
  ' | paste -sd " "
  else
    awk '
    {
      count[$0]++
      lines[NR] = $0
    }
    END {
      for (i = 1; i <= NR; i++) {
        if (count[lines[i]] == 1) print lines[i]
      }
    }
  '
  fi
}

file=${cmdarg_argv[0]}

if [[ -z ${file} || ${file} == "-" ]]; then
  # Read from stdin
  remove_duplicates
else
  tmpfile="$(mktemp)"
  trap 'rm -f $tmpfile' EXIT
  # Read from file
  if [[ -f ${file} ]]; then
    if [[ ${useBackup} == true ]]; then
      cp "${file}" "${file}.bak"
      [[ ${quiet} == true ]] || log-info "Backup created as ${file}.bak"
    fi

    remove_duplicates <"${file}" >"${tmpfile}"

    # override the input file
    if [[ ${force} == true ]]; then
      mv "${tmpfile}" "${file}"
    else
      mv -i "${tmpfile}" "${file}"
    fi

    [[ ${quiet} == true ]] || log-info "Filtered unique lines from '${file}'!"
  else
    log-error "${file} was not found!"
  fi
fi
