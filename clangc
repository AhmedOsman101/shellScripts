#!/usr/bin/env bash

# --- SCRIPT SIGNATURE --- #
#
#            ▄▄▄▄
#            ▀▀██
#   ▄█████▄    ██       ▄█████▄  ██▄████▄   ▄███▄██   ▄█████▄
#  ██▀    ▀    ██       ▀ ▄▄▄██  ██▀   ██  ██▀  ▀██  ██▀    ▀
#  ██          ██      ▄██▀▀▀██  ██    ██  ██    ██  ██
#  ▀██▄▄▄▄█    ██▄▄▄   ██▄▄▄███  ██    ██  ▀██▄▄███  ▀██▄▄▄▄█
#    ▀▀▀▀▀      ▀▀▀▀    ▀▀▀▀ ▀▀  ▀▀    ▀▀   ▄▀▀▀ ██    ▀▀▀▀▀
#                                           ▀████▀▀
#
# --- DESCRIPTION --- #
# Compiles and optionally runs C files with customizable compiler arguments
# --- DEPENDENCIES --- #
# - clang
# --- END SIGNATURE --- #

set -eo pipefail

trap 'exit 1' SIGUSR1

eval "$(include "lib/cmdarg.sh")"

eval "$(include "check-deps")"
checkDeps "$0"
# ---  Main script logic --- #
cmdarg_info "header" "$(get-desc "$0")"

cmdarg "c" "compile" "Compile the files in the current working directory"
cmdarg "v" "verbose" "Show success message after compilation (works with compile mode only)"
cmdarg "a?" "compiler-args" "Compiler arguments" ""

cmdarg_parse "$@"

compile=${cmdarg_cfg['compile']}
verbose=${cmdarg_cfg['verbose']}
compiler_args=${cmdarg_cfg['compiler-args']}

if [[ ${#cmdarg_argv[@]} -lt 1 ]]; then
  log-error "No input files were provided."
fi

declare -a files

for file in "${cmdarg_argv[@]}"; do
  if [[ ! -r "${file}" ]]; then
    log-error "File '${file}' is not readable."
  fi
  # Basic filename validation (no spaces or special chars for simplicity)
  if [[ ! "${file}" =~ ^[a-zA-Z0-9._-]+$ ]]; then
    log-error "Invalid filename '${file}'."
  fi

  files+=("${file}")
done

if [[ ${compile} == true ]]; then
  outfile="$(echo "${files[0]}" | cut -d "." -f1).out"
else
  outfile=$(mktemp -t "$(basename "$0")"-XXXXXX.out)
  trap 'rm -f $outfile' EXIT
fi

# Splitting the args into an array instead of a single string
mapfile -t compilerArgs <<<"${compiler_args}"

if [[ -n "${compiler_args}" ]]; then
  if ! clang -Wall -Wextra -lm "${files[@]}" -o "${outfile}" "${compilerArgs[@]}"; then
    log-error "Compilation failed."
  fi
else
  if ! clang -Wall -Wextra -lm "${files[@]}" -o "${outfile}"; then
    log-error "Compilation failed."
  fi
fi

# Compile-and-run mode: run the program and propagate its exit status
if [[ ${compile} != true && -f "${outfile}" ]]; then
  ${outfile}
  exit $? # Propagate the program's exit status
fi

# Compile-only mode: just compile and exit successfully
if [[ ${compile} == true && ${verbose} == true ]]; then
  log-success "Compilation successful: ${outfile}"
fi

exit 0 # Success if compile-only or no execution
