#!/usr/bin/env bash
#
# --- SCRIPT SIGNATURE --- #
#
#            ▄▄▄▄
#            ▀▀██
#   ▄█████▄    ██       ▄█████▄  ██▄████▄   ▄███▄██   ▄█████▄
#  ██▀    ▀    ██       ▀ ▄▄▄██  ██▀   ██  ██▀  ▀██  ██▀    ▀
#  ██          ██      ▄██▀▀▀██  ██    ██  ██    ██  ██
#  ▀██▄▄▄▄█    ██▄▄▄   ██▄▄▄███  ██    ██  ▀██▄▄███  ▀██▄▄▄▄█
#    ▀▀▀▀▀      ▀▀▀▀    ▀▀▀▀ ▀▀  ▀▀    ▀▀   ▄▀▀▀ ██    ▀▀▀▀▀
#                                           ▀████▀▀
#
# --- DESCRIPTION --- #
# Compiles and optionally runs C files with customizable compiler arguments
# --- DEPENDENCIES --- #
# - clang
# --- END SIGNATURE --- #

set -eo pipefail
trap 'exit 1' SIGUSR1

eval "$(include "lib/cmdarg.sh")"
eval "$(include "check-deps")"
checkDeps "$0"

# --- cmdarg setup --- #
cmdarg_info "header" "$(get-desc "$0")"

declare -a compiler_args
cmdarg "c" "compile" "Compile the files in the current working directory"
cmdarg "o?" "output" "Specify the output file name" ""
cmdarg "a?[]" "compiler_args" "Custom compiler arguments"
cmdarg "q" "quiet" "Supress all output"

cmdarg_parse "$@"
# ---  Main script logic --- #
compile="${cmdarg_cfg['compile']}"
output="${cmdarg_cfg['output']}"
quiet="${cmdarg_cfg['quiet']}"

((argc < 1)) && log-error "No input files were provided."

declare -a files

for file in "${argv[@]}"; do
  [[ ! -f "${file}" ]] && log-error "'${file}' is not a file."
  [[ ! -r "${file}" ]] && log-error "File '${file}' is not readable."

  files+=("${file}")
done

filename="$(basename "${files[0]}" | cut -d "." -f1)"

if [[ "${compile}" == true ]]; then
  outfile="${filename}.out"
  [[ -n "${output}" ]] && outfile="${output}"
else
  outfile=$(mktemp -t "${filename}-XXXXXX.out")
  trap 'rm -f $outfile' EXIT
fi

cmdArray=(
  clang
  -Wall
  -Wextra
  -lm "${files[@]}"
  -o "${outfile}"
)

if ((1 < ${#compiler_args[@]})); then
  cmdArray+=("${compiler_args[@]}")
fi

if [[ "${quiet}" == true ]]; then
  "${cmdArray[@]}" &>/dev/null || log-error "Compilation failed."
else
  "${cmdArray[@]}" || log-error "Compilation failed."
fi

if [[ -f "${outfile}" ]]; then
  # Compile-and-run mode: run the program and propagate its exit status
  if [[ "${compile}" == true ]]; then
    log-success "Compilation successful: ${outfile}"
    exit 0
  else
    "${outfile}"
    exit $? # Propagate the program's exit status
  fi
else
  log-error "Compilation failed."
fi
