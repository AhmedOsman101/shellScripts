#!/usr/bin/env bash

# --- SCRIPT SIGNATURE --- #
#
#            ▄▄                            ▄▄                        ▄▄
#            ██                            ██                        ██
#   ▄█████▄  ██▄████▄   ▄████▄    ▄█████▄  ██ ▄██▀              ▄███▄██   ▄████▄   ██▄███▄   ▄▄█████▄
#  ██▀    ▀  ██▀   ██  ██▄▄▄▄██  ██▀    ▀  ██▄██               ██▀  ▀██  ██▄▄▄▄██  ██▀  ▀██  ██▄▄▄▄ ▀
#  ██        ██    ██  ██▀▀▀▀▀▀  ██        ██▀██▄     █████    ██    ██  ██▀▀▀▀▀▀  ██    ██   ▀▀▀▀██▄
#  ▀██▄▄▄▄█  ██    ██  ▀██▄▄▄▄█  ▀██▄▄▄▄█  ██  ▀█▄             ▀██▄▄███  ▀██▄▄▄▄█  ███▄▄██▀  █▄▄▄▄▄██
#    ▀▀▀▀▀   ▀▀    ▀▀    ▀▀▀▀▀     ▀▀▀▀▀   ▀▀   ▀▀▀              ▀▀▀ ▀▀    ▀▀▀▀▀   ██ ▀▀▀     ▀▀▀▀▀▀
#                                                                                  ██
#
# --- DESCRIPTION --- #
# Checks a script's dependencies and installs them
# --- END SIGNATURE --- #

eval "$(include "lib/helpers.sh")"

# ---  Main script logic --- #

checkDep() {
  local line exeName pkgName i
  line=$1
  pkgName=""
  i=1

  # Check for multi-packages enetries, if one is installed then skip
  while
    exeName=$(echo "${line}" | awk -F "|" "{print \$${i}}" | Trim | awk '{print $1}')
    [[ -n "${exeName}" ]]
  do
    if command -v "${exeName}" >/dev/null 2>&1; then
      return 0
    fi

    ((i++))
  done

  exeName=$(echo "${line}" | awk -F "|" '{print $1}' | Trim | awk '{print $1}')

  if echo "${line}" | grep -oP '\(\K[^)]*(?=\))' -q; then
    pkgName=$(echo "${line}" | grep -oP '\(\K[^)]*(?=\))')
  fi

  if [[ -n ${pkgName} ]]; then
    echo "${pkgName}"
  else
    echo "${exeName}"
  fi

  return 0
}

getAskPass() {
  local askpass=""

  # Check if running in a graphical environment
  if [[ -n "${DISPLAY}" || -n "${WAYLAND_DISPLAY}" ]]; then
    # Check for rofi-askpass
    if command -v rofi-askpass >/dev/null 2>&1; then
      askpass="$(command -v rofi-askpass)"
    # Check for zenity
    elif command -v zenity >/dev/null 2>&1; then
      askpass="zenity --password --title='Authentication Required' --timeout=30"
    # Check for kdialog
    elif command -v kdialog >/dev/null 2>&1; then
      askpass="kdialog --password 'Authentication Required'"
    # Check for yad (zenity fork)
    elif command -v yad >/dev/null 2>&1; then
      askpass="yad --entry --hide-text --title='Authentication Required' --button=OK:0 --timeout=30 --width=300 --height=150 --center"
    # Check for ssh-askpass (common in some X11 setups)
    elif command -v ssh-askpass >/dev/null 2>&1; then
      askpass="$(command -v ssh-askpass)"
    # Check for x11-ssh-askpass (alternative askpass tool)
    elif command -v x11-ssh-askpass >/dev/null 2>&1; then
      askpass="$(command -v x11-ssh-askpass)"
      # Check for dialog (text-based UI for terminals)
    elif command -v dialog >/dev/null 2>&1; then
      askpass="/bin/sh -c 'dialog --passwordbox \"Authentication Required\" 8 40 2>&1 >/dev/tty; echo \$?'"
    # Check for whiptail (alternative text-based UI for terminals)
    elif command -v whiptail >/dev/null 2>&1; then
      askpass="/bin/sh -c 'whiptail --passwordbox \"Authentication Required\" 8 40 2>&1 >/dev/tty; echo \$?'"
    else
      # Fallback for terminal prompt
      askpass="/bin/sh -c 'stty -echo; printf \"Password: \"; read password; stty echo; echo \"\$password\"'"
    fi
  else
    # Non-graphical environment (terminal)
    # Check for dialog
    if command -v dialog >/dev/null 2>&1; then
      askpass="/bin/sh -c 'dialog --passwordbox \"Authentication Required\" 8 40 2>&1 >/dev/tty; echo \$?'"
    # Check for whiptail
    elif command -v whiptail >/dev/null 2>&1; then
      askpass="/bin/sh -c 'whiptail --passwordbox \"Authentication Required\" 8 40 2>&1 >/dev/tty; echo \$?'"
    else
      # Fallback for terminal prompt
      askpass="/bin/sh -c 'stty -echo; printf \"Password: \"; read password; stty echo; echo \"\$password\"'"
    fi
  fi
  printf '%s' "${askpass}"
}

installDep() {
  local pkg pkgManager installCmd
  local -a cmdArray

  pkg=$1

  pkgManager=$(getPackageManager)
  installCmd=$(echo ${pkgManager} | awk -F ':' '{print $NF}')
  read -ra cmdArray <<<"${installCmd} ${pkg}"

  logInfo "Attempting to install package: ${pkg}"

  if SUDO_ASKPASS="$(getAskPass)" "${cmdArray[@]}"; then
    sleep 1 && clear
    logInfo "Installed ${pkg}"
    return 0
  else
    sleep 1 && clear
    logWarning "Couldn't install ${pkg}"
    return 1
  fi
}

checkDeps() {
  local file completed item line
  local -a depsArray failed

  if [[ $# -ne 1 ]]; then
    logError "Invalid arguments, only a script name is accepted"
  else
    if [[ -f $1 ]]; then
      file=$1
    else
      file=$(which $1)
    fi

    [[ ! -f ${file} ]] && logError "Script '${file}' was not found"
  fi

  [[ "$(getDeps "${file}")" == "x-none" ]] && return 0

  mapfile -t depsArray < <(getDeps "${file}")

  completed=0
  for line in "${depsArray[@]}"; do
    item=$(checkDep "${line}")
    if [[ -n "${item}" ]]; then
      installDep "${item}" || {
        completed=1
        failed+=("${item}")
      }
    fi
  done
  [[ ${completed} == 1 ]] && logError "Failed to install all dependencies ($(joinarr ', ' "${failed[@]}"))"
  return 0
}
