#!/usr/bin/env bash

# --- SCRIPT SIGNATURE --- #
#
#               ██
#               ▀▀       ██
#   ▄███▄██   ████     ███████   ▄▄█████▄  ▀██  ███  ██▄████▄   ▄█████▄
#  ██▀  ▀██     ██       ██      ██▄▄▄▄ ▀   ██▄ ██   ██▀   ██  ██▀    ▀
#  ██    ██     ██       ██       ▀▀▀▀██▄    ████▀   ██    ██  ██
#  ▀██▄▄███  ▄▄▄██▄▄▄    ██▄▄▄   █▄▄▄▄▄██     ███    ██    ██  ▀██▄▄▄▄█
#   ▄▀▀▀ ██  ▀▀▀▀▀▀▀▀     ▀▀▀▀    ▀▀▀▀▀▀      ██     ▀▀    ▀▀    ▀▀▀▀▀
#   ▀████▀▀                                 ███
#
# --- DESCRIPTION --- #
# Automates adding, committing with a timestamp, and pushing changes to a Git repository
# --- DEPENDENCIES --- #
# - git
# - gum
# --- END SIGNATURE --- #

set -eo pipefail

trap 'exit 1' SIGUSR1

eval "$(include "lib/cmdarg.sh")"

eval "$(include "check-deps")"
checkDeps "$0"
# ---  Main script logic --- #
cmdarg_info "header" "$(get-desc $0)"

cmdarg "b?" "branch" "Specify the branch to work on. Defaults to current branch." "#no-branch#"
cmdarg "m" "message" "Opens an interactive model for adding a custom commit message"
cmdarg "s" "staged" "Commits the staged changes only, no auto stage"

cmdarg_parse "$@"

# check if in a git repo and if the user is inside .git directory
is-git-repo

branch=${cmdarg_cfg['branch']}
onlyStaged=${cmdarg_cfg['staged']}
hasMsg=${cmdarg_cfg['message']}

currentBranch="$(git_current_branch)"
[[ -z "${currentBranch}" ]] && log-error "Unable to determine current branch."

# Check if the branch argument is an empty string
if [[ "${branch}" == "#no-branch#" || -z "${branch}" ]]; then
  # returns the current working branch
  branch="${currentBranch}"
elif [[ "${branch}" != "${currentBranch}" ]]; then
  switch-branch "${branch}" || log-error "Switching to branch '${branch}' failed"
  log-info "Switched to branch: ${branch}"
fi

[[ ${onlyStaged} != true ]] && git add --all

# Check for changes before attempting to commit
if git status --porcelain | grep -q '^'; then

  if [[ ${hasMsg} == true ]]; then
    msg=$(gum write --placeholder "Write the commit message...")
    gum confirm "Add timestamps?" && msg="${msg} $(now)"
  else
    # Set default message if unset or empty
    msg="Updated Files $(now)"
  fi

  # There are changes, so attempt the commit
  if git commit -m "${msg}"; then
    log-info "Committed Changes Locally"
  else
    # Commit failed (e.g., due to pre-commit hook)
    log-error "Commit failed!"
  fi
else
  log-info "Nothing to commit"
fi

# Push if remote exists
if [[ -n "$(git remote -v)" ]]; then
  if git push origin "${branch}"; then
    log-success "Changes pushed to ${branch} successfully!"
  else
    log-error "Failed to push to ${branch}."
  fi
fi
