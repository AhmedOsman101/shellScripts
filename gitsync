#!/usr/bin/env bash

set -eo pipefail

trap 'exit 1' SIGUSR1

source cmdarg.sh

# ----  Main script logic ---- #
cmdarg_info "header" "This script automates adding changes, committing them with a timestamp, and pushing the changes to the remote repository."

cmdarg "b?" "branch" "Specify the branch to work on. Defaults to current branch." "no branch"
cmdarg "m" "message" "Opens an interactive model for adding a custom commit message"

# returns true if it's a git repo and false otherwise
isGitRepo=$(git rev-parse --is-inside-work-tree 2>/dev/null) || log-error "${PWD} is not a git repository."

# check if the user is inside .git directory
[[ ${isGitRepo} != true ]] && log-error "Not in a work tree."

cmdarg_parse "$@"

branch=${cmdarg_cfg['branch']}
hasMsg=${cmdarg_cfg['message']}

currentBranch="$(git branch --show-current 2>/dev/null)"

[[ -z "${currentBranch}" ]] && log-error "Unable to determine current branch."

# Check if the branch argument is an empty string
if [[ "${branch}" == "no branch" || -z "${branch}" ]]; then
  # returns the current working branch
  branch="${currentBranch}"
elif [[ "${branch}" != "${currentBranch}" ]]; then
  git checkout "${branch}" 2>/dev/null || log-error "Failed to checkout branch: ${branch}"
  log-info "Checked out to branch: ${branch}"
fi

main() {
  local timestamp
  timestamp="$(date +"%Y-%m-%d@%I:%M%p")"

  git add --all

  # Set default message if unset or empty
  [[ -z ${msg} ]] && msg="Updated Files ${timestamp}"

  # Check for changes before attempting to commit
  if git status --porcelain | grep -q '^'; then

    if [[ ${hasMsg} == true ]]; then
      msg=$(gum write --placeholder "Write the commit message...")
      gum confirm "Add timestamps?" && msg="${msg} ${timestamp}"
    fi

    # There are changes, so attempt the commit
    if git commit -am "${msg}"; then
      log-info "Committed Changes Locally ${timestamp}"
    else
      # Commit failed (e.g., due to pre-commit hook)
      log-error "Commit failed!"
    fi
  else
    log-info "Nothing to commit"
  fi

  # Push if remote exists
  if [[ -n "$(git remote -v)" ]]; then
    # git push origin "${branch}" && log-success "Changes pushed to ${branch} successfully!"
    if git push origin "${branch}"; then
      log-success "Changes pushed to ${branch} successfully!"
    else
      log-error "Failed to push to ${branch}."
    fi
  fi
}

# run the main function if no errors occurred
main
