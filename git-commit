#!/usr/bin/env bash

set -euo pipefail

is-git-repo

choices=(
  "feat: Introduce a new feature."
  "fix: Patching a bug."
  "revert: Reverting a previous commit."
  "docs: Updates to documentation."
  "style: Changes not affecting the code, e.g. formatting."
  "refactor: Code changes, neither fix a bug nor add a feature."
  "perf: Improveing performance."
  "test: Adding/Correcting tests."
  "build: Changes affecting the build system or external dependencies."
  "chore: Updates to build configuration, auxiliary tools, and libraries."
)

terminate() {
  log-info "Program terminated!"
  exit 0
}

declare -a files

if ! git status --porcelain | grep -q '^'; then
  log-info "Nothing to commit"
  exit 0
fi

if ! git status --porcelain | rg -q '^[MAD]'; then
  log-info "No staged changes found\n"
  output=$(
    git status --porcelain |
      rg -v '^[MAD]' |
      trim |
      gum choose --no-limit --header="Choose files to stage:" --header.foreground="${U_GREEN}"
  ) || terminate

  mapfile -t files < <(echo "${output}" | awk '{print $2}') || terminate

  git add "${files[@]}"
fi

type=$(
  gum filter \
    --placeholder "Commit type..." "${choices[@]}" |
    cut -d ':' -f 1
) || terminate

summary=$(
  gum input \
    --value "(${type}): " \
    --placeholder "Summary of this change"
)

details=$(gum write --placeholder "Details of this change") || terminate

gum confirm "Commit changes?" || terminate

git commit -m "${summary}" -m "${details}"

if [[ -n "$(git remote -v)" ]]; then
  gum confirm "Push changes?" || terminate

  branch="$(git_current_branch)"
  if git push origin "${branch}"; then
    log-success "Changes pushed to ${branch} successfully!"
  else
    log-error "Failed to push to ${branch}."
  fi
fi
