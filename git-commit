#!/usr/bin/env bash
# --- SCRIPT SIGNATURE --- #
#
#               ██                                                                    ██
#               ▀▀       ██                                                           ▀▀       ██
#   ▄███▄██   ████     ███████              ▄█████▄   ▄████▄   ████▄██▄  ████▄██▄   ████     ███████
#  ██▀  ▀██     ██       ██                ██▀    ▀  ██▀  ▀██  ██ ██ ██  ██ ██ ██     ██       ██
#  ██    ██     ██       ██       █████    ██        ██    ██  ██ ██ ██  ██ ██ ██     ██       ██
#  ▀██▄▄███  ▄▄▄██▄▄▄    ██▄▄▄             ▀██▄▄▄▄█  ▀██▄▄██▀  ██ ██ ██  ██ ██ ██  ▄▄▄██▄▄▄    ██▄▄▄
#   ▄▀▀▀ ██  ▀▀▀▀▀▀▀▀     ▀▀▀▀               ▀▀▀▀▀     ▀▀▀▀    ▀▀ ▀▀ ▀▀  ▀▀ ▀▀ ▀▀  ▀▀▀▀▀▀▀▀     ▀▀▀▀
#   ▀████▀▀
#
# --- DESCRIPTION --- #
# Adds a conventinal commit message or generates one with AI
# --- DEPENDENCIES --- #
# - git
# - rg (ripgrep)
# - gum
# - mdcat
# - commit-sage
# - sponge (moreutils)
# --- END SIGNATURE --- #

set -eo pipefail

trap 'exit 1' SIGUSR1

source cmdarg.sh

source check-deps
checkDeps "$0"
# ---  Main script logic --- #
cmdarg_info "header" "$(get-desc "$0")"

cmdarg "a" "ai" "Use AI to generate the message"
cmdarg "y" "yes" "Answer yes to all the prompts"
cmdarg "l" "local" "Commit changes without confirmation (no push)"
cmdarg "p" "push" "Commit and push without confirmation"
cmdarg "e" "edit" "Edit the commit message after generation (used with --ai)"

cmdarg_parse "$@"

useAi=${cmdarg_cfg['ai']}
noConfirm=${cmdarg_cfg['yes']}
local=${cmdarg_cfg['local']}
push=${cmdarg_cfg['push']}
edit=${cmdarg_cfg['edit']}

is-git-repo

repoPath=$(git-root)

choices=(
  "docs: ANY changes to documentation files (*.md, docs/*, etc.)"
  "feat: New features or significant functional changes"
  "fix: Bug fixes and error corrections"
  "style: Changes not affecting the code, e.g. formatting, semicolons, etc."
  "refactor: Code changes, neither fix a bug nor add a feature."
  "perf: Performance improvements"
  "test: Adding or updating tests"
  "build: Changes affecting the build system or external dependencies."
  "ci: CI/CD changes"
  "chore: Updates to build configuration, libraries, and other maintenance tasks."
  "revert: Reverting a previous commit."
)

terminate() {
  log-info "Program terminated!"
  exit 0
}

declare -a files

if ! git status --porcelain | grep -q '^'; then
  log-info "Nothing to commit"
  exit 0
fi

if ! git status --porcelain | rg -q '^[A-Z]'; then
  output=$(
    git status --porcelain |
      rg -v '^[MAD]' |
      trim |
      gum choose \
        --no-limit \
        --header="Choose files to stage:" \
        --header.foreground="${U_GREEN}" \
        --select-if-one
  ) || terminate

  # Parse output to extract file names, preserving spaces
  mapfile -t files < <(
    echo "${output}" |
      cut -d " " -f 2- | tr -d '"' |
      sed -E 's/^[?[:space:]]{3}//'
  ) || terminate

  for file in "${files[@]}"; do
    git add "${repoPath}/${file}"
  done
fi

if [[ "${useAi}" == true ]]; then
  logFile=$(mktemp -t commit-sage-XXXXX.log)
  trap 'rm -f $logFile' EXIT

  cmdArray=(bash -c "commit-sage > ${logFile} 2>&1")

  if ! gum spin --title "Generating..." -- "${cmdArray[@]}"; then
    log-error "$(sed 's|\[ERROR\] ||' ${logFile})"
  fi

  # Check for [ERROR] lines after execution
  if rg -q '\[ERROR\].' ${logFile}; then
    log-error "$(sed 's|\[ERROR\] ||' ${logFile})"
  fi

  if [[ "${edit}" == true ]]; then
    gum write \
      --placeholder "Write the commit message..." \
      --strip-ansi \
      --value="$(cat ${logFile})" |
      sponge ${logFile} || terminate
  fi

  transformed=$(cat ${logFile} | tr "\n" "#")

  summary=$(echo "${transformed}" | awk -F "##" '{print $1}' | sed 's|#$||g')
  details=$(echo "${transformed}" | awk -F "##" '{print $2}' | tr "#" "\n")
else
  type=$(
    gum filter \
      --placeholder "Commit type..." "${choices[@]}" |
      cut -d ':' -f 1
  ) || terminate

  summary=$(
    gum input \
      --value "${type}: " \
      --placeholder "Summary of this change"
  )

  details=$(gum write --placeholder "Details of this change") || terminate
fi

echo -e "${summary}\n\n${details}\n" | mdcat
echo ""

if [[ "${noConfirm}" != true ]]; then
  gum confirm "Commit changes?" || terminate
fi

git commit -m "${summary}" -m "${details}"

if [[ -n "$(git remote -v)" && "${local}" != true ]]; then
  if [[ "${noConfirm}" != true ]]; then
    gum confirm "Push changes?" || terminate
  fi

  branch="$(git_current_branch)"
  if git push origin "${branch}"; then
    log-success "Changes pushed to ${branch} successfully!"
  else
    log-error "Failed to push to ${branch}."
  fi
fi
