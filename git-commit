#!/usr/bin/env bash
# --- SCRIPT SIGNATURE --- #
#
#               ██                                                                    ██
#               ▀▀       ██                                                           ▀▀       ██
#   ▄███▄██   ████     ███████              ▄█████▄   ▄████▄   ████▄██▄  ████▄██▄   ████     ███████
#  ██▀  ▀██     ██       ██                ██▀    ▀  ██▀  ▀██  ██ ██ ██  ██ ██ ██     ██       ██
#  ██    ██     ██       ██       █████    ██        ██    ██  ██ ██ ██  ██ ██ ██     ██       ██
#  ▀██▄▄███  ▄▄▄██▄▄▄    ██▄▄▄             ▀██▄▄▄▄█  ▀██▄▄██▀  ██ ██ ██  ██ ██ ██  ▄▄▄██▄▄▄    ██▄▄▄
#   ▄▀▀▀ ██  ▀▀▀▀▀▀▀▀     ▀▀▀▀               ▀▀▀▀▀     ▀▀▀▀    ▀▀ ▀▀ ▀▀  ▀▀ ▀▀ ▀▀  ▀▀▀▀▀▀▀▀     ▀▀▀▀
#   ▀████▀▀
#
# --- DESCRIPTION --- #
# Adds a conventinal commit message or generates one with AI
# --- DEPENDENCIES --- #
# - git
# - ripgrep
# - gum
# - mdcat
# --- END SIGNATURE --- #

set -eo pipefail

source cmdarg.sh

# ---  Main script logic --- #
cmdarg_info "header" "$(get-desc $0)"

cmdarg "a" "ai" "Use AI to generate the message"

cmdarg_parse "$@"

useAi=${cmdarg_cfg['ai']}

is-git-repo

choices=(
  "feat: Introduce a new feature."
  "fix: Patching a bug."
  "revert: Reverting a previous commit."
  "docs: Updates to documentation."
  "style: Changes not affecting the code, e.g. formatting."
  "refactor: Code changes, neither fix a bug nor add a feature."
  "perf: Improveing performance."
  "test: Adding/Correcting tests."
  "build: Changes affecting the build system or external dependencies."
  "chore: Updates to build configuration, auxiliary tools, and libraries."
)

terminate() {
  log-info "Program terminated!"
  exit 0
}

declare -a files

if ! git status --porcelain | grep -q '^'; then
  log-info "Nothing to commit"
  exit 0
fi

if ! git status --porcelain | rg -q '^[MAD]'; then
  log-info "No staged changes found\n"
  output=$(
    git status --porcelain |
      rg -v '^[MAD]' |
      trim |
      gum choose --no-limit --header="Choose files to stage:" --header.foreground="${U_GREEN}"
  ) || terminate

  mapfile -t files < <(echo "${output}" | awk '{print $2}') || terminate

  git add "${files[@]}"
fi

if [[ "${useAi}" == true ]]; then
  commitMessage=$(
    gum spin \
      --title "Generating..." \
      --title.foreground="${U_GREEN}" \
      -- commit-sage
  ) || log-error "Message generation failed"

  transformed=$(echo "${commitMessage}" | tr "\n" "#")

  summary=$(echo "${transformed}" | tr "\n" "#" | awk -F "##" '{print $1}')
  details=$(echo "${transformed}" | awk -F "##" '{print $2}' | tr "#" "\n")
else
  type=$(
    gum filter \
      --placeholder "Commit type..." "${choices[@]}" |
      cut -d ':' -f 1
  ) || terminate

  summary=$(
    gum input \
      --value "(${type}): " \
      --placeholder "Summary of this change"
  )

  details=$(gum write --placeholder "Details of this change") || terminate
fi

echo -e "${summary}\n\n${details}\n" | mdcat
echo ""

gum confirm "Commit changes?" || terminate

git commit -m "${summary}" -m "${details}"

if [[ -n "$(git remote -v)" ]]; then
  gum confirm "Push changes?" || terminate

  branch="$(git_current_branch)"
  if git push origin "${branch}"; then
    log-success "Changes pushed to ${branch} successfully!"
  else
    log-error "Failed to push to ${branch}."
  fi
fi
