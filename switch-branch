#!/usr/bin/env bash

# --- SCRIPT SIGNATURE --- #
#
#                         ██                         ▄▄                  ▄▄                                                ▄▄
#                         ▀▀       ██                ██                  ██                                                ██
#  ▄▄█████▄ ██      ██  ████     ███████    ▄█████▄  ██▄████▄            ██▄███▄    ██▄████   ▄█████▄  ██▄████▄   ▄█████▄  ██▄████▄
#  ██▄▄▄▄ ▀ ▀█  ██  █▀    ██       ██      ██▀    ▀  ██▀   ██            ██▀  ▀██   ██▀       ▀ ▄▄▄██  ██▀   ██  ██▀    ▀  ██▀   ██
#   ▀▀▀▀██▄  ██▄██▄██     ██       ██      ██        ██    ██   █████    ██    ██   ██       ▄██▀▀▀██  ██    ██  ██        ██    ██
#  █▄▄▄▄▄██  ▀██  ██▀  ▄▄▄██▄▄▄    ██▄▄▄   ▀██▄▄▄▄█  ██    ██            ███▄▄██▀   ██       ██▄▄▄███  ██    ██  ▀██▄▄▄▄█  ██    ██
#   ▀▀▀▀▀▀    ▀▀  ▀▀   ▀▀▀▀▀▀▀▀     ▀▀▀▀     ▀▀▀▀▀   ▀▀    ▀▀            ▀▀ ▀▀▀     ▀▀        ▀▀▀▀ ▀▀  ▀▀    ▀▀    ▀▀▀▀▀   ▀▀    ▀▀
#
#
# --- DESCRIPTION --- #
# Switches between Git branches
# --- DEPENDENCIES --- #
# - git
# - gum
# - rg (ripgrep)
# --- END SIGNATURE --- #

set -eo pipefail

trap 'exit 1' SIGUSR1

eval "$(include "lib/cmdarg.sh")"

eval "$(include "lib/helpers.sh")"

eval "$(include "check-deps")"
checkDeps "$0"
# ---  Main script logic --- #
cmdarg_info "header" "$(get-desc "$0")"

cmdarg "n" "new" "Create a new branch and switch to it"
cmdarg "o" "orphan" "Create a new orphan branch (no parent history) and switch to it"

cmdarg_parse "$@"

createNew=${cmdarg_cfg['new']}
createOrphan=${cmdarg_cfg['orphan']}

branchParam=${cmdarg_argv[0]:-"#-none-#"}

is-git-repo

current="$(git_current_branch)" || log-error "Cannot find current branch"

branchList=$(
  git branch --list --format='%(refname:short)' --remote
  git branch --list --format='%(refname:short)'
)

branchList=$(
  printf '%s\n' "${branchList}" |
    sed -e 's|^origin/||g' -e 's|^origin$||g' |
    tr -d "/" |
    no-dups | trim |
    remove-blanks
)

branchesString="$(
  (printf '%s\n' "${current}")                           # Add the current branch first
  (printf '%s\n' "${branchList}" | rg -v "^${current}$") # Add the rest, excluding the current one
)" || branchesString="${current}"

declare -a branches
mapfile -t branches <<<"${branchesString}"

file=$(mktemp -t XXXXX-"$(basename $0)")
trap 'rm -f $file' EXIT

switchBranch() {
  local branchName=$1
  local found=0

  if [[ ${#branches[@]} == 1 ]]; then
    log-warning "This Repository only contains one branch"
    exit 0
  fi

  if [[ ${#branches[@]} == 0 ]]; then
    log-error "No branches were found"
  fi

  if [[ "${branchName}" == "#-none-#" ]]; then
    branchName=$(
      gum choose \
        --selected="${current}" \
        --limit=1 \
        --select-if-one \
        "${branches[@]}"
    ) || terminate
  fi

  for branch in "${branches[@]}"; do
    if [[ "${branchName}" == "${branch}" ]]; then
      found=1
      break
    fi
  done

  if [[ ${found} -eq 0 ]]; then
    log-warning "No branch with the name '${branchName}' was found!"
    if gum confirm "Do you want to create it?"; then
      createBranch "${branchName}"
    fi
    exit 0
  fi

  [[ "${branchName}" == "${current}" ]] && {
    log-success "Already on '${current}'"
    exit 0
  }

  if git checkout "${branchName}" &>${file}; then
    log-success "$(cat ${file})"
  else
    log-warning "$(cat ${file})"
    log-error "Failed to switch to branch '${branchName}'"
  fi
}

createBranch() {
  local branchName=$1
  local isOrphan="${2:-false}"

  if [[ "${branchName}" == "#-none-#" ]]; then
    branchName=$(
      gum input --placeholder "Enter the branch name: "
    ) || log-error "Failed to capture the branch name"
  fi

  for branch in "${branches[@]}"; do
    if [[ "${branchName}" == "${branch}" ]]; then
      log-warning "The branch already exists! Switching to branch '${branchName}'"
      switchBranch "${branchName}"
      exit 0
    fi
  done

  local cmd=('git' 'checkout')
  local clearPrev=0
  if [[ "${isOrphan}" == true ]]; then
    cmd+=('--orphan' "${branchName}")
    gum confirm "Do you want to remove all tracked files from index?" || clearPrev=$?
  else
    cmd+=('-b' "${branchName}")
  fi

  if "${cmd[@]}" &>${file}; then
    log-success "$(cat ${file})"
    if [[ "${clearPrev}" == 0 ]]; then
      git rm -rf . &>/dev/null || true
    fi
  else
    log-warning "$(cat ${file})"
    log-error "Failed to create branch '${branch}'"
  fi
}

if [[ "${createNew}" == true ]]; then
  createBranch "${branchParam}"
elif [[ "${createOrphan}" == true ]]; then
  createBranch "${branchParam}" true
else
  switchBranch "${branchParam}"
fi
