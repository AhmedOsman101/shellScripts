#!/usr/bin/env bash
#
# --- SCRIPT SIGNATURE --- #
#
#     â–ˆâ–ˆ                                             â–„â–„â–„â–„      â–„â–„â–„â–„                                                                            â–„â–„â–„â–„         â–ˆâ–ˆ
#     â–€â–€                           â–ˆâ–ˆ                â–€â–€â–ˆâ–ˆ      â–€â–€â–ˆâ–ˆ                                      â–ˆâ–ˆ                                    â–€â–€â–ˆâ–ˆ         â–€â–€
#   â–ˆâ–ˆâ–ˆâ–ˆ     â–ˆâ–ˆâ–„â–ˆâ–ˆâ–ˆâ–ˆâ–„  â–„â–„â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ    â–„â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„    â–ˆâ–ˆ        â–ˆâ–ˆ                 â–„â–ˆâ–ˆâ–ˆâ–ˆâ–„   â–€â–ˆâ–ˆ  â–ˆâ–ˆâ–€  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ              â–„â–ˆâ–ˆâ–ˆâ–ˆâ–„   â–ˆâ–ˆâ–„â–ˆâ–ˆâ–ˆâ–ˆâ–„    â–ˆâ–ˆ       â–ˆâ–ˆâ–ˆâ–ˆ     â–ˆâ–ˆâ–„â–ˆâ–ˆâ–ˆâ–ˆâ–„   â–„â–ˆâ–ˆâ–ˆâ–ˆâ–„
#     â–ˆâ–ˆ     â–ˆâ–ˆâ–€   â–ˆâ–ˆ  â–ˆâ–ˆâ–„â–„â–„â–„ â–€    â–ˆâ–ˆ       â–€ â–„â–„â–„â–ˆâ–ˆ    â–ˆâ–ˆ        â–ˆâ–ˆ                â–ˆâ–ˆâ–„â–„â–„â–„â–ˆâ–ˆ    â–ˆâ–ˆâ–ˆâ–ˆ      â–ˆâ–ˆ                â–ˆâ–ˆâ–€  â–€â–ˆâ–ˆ  â–ˆâ–ˆâ–€   â–ˆâ–ˆ    â–ˆâ–ˆ         â–ˆâ–ˆ     â–ˆâ–ˆâ–€   â–ˆâ–ˆ  â–ˆâ–ˆâ–„â–„â–„â–„â–ˆâ–ˆ
#     â–ˆâ–ˆ     â–ˆâ–ˆ    â–ˆâ–ˆ   â–€â–€â–€â–€â–ˆâ–ˆâ–„    â–ˆâ–ˆ      â–„â–ˆâ–ˆâ–€â–€â–€â–ˆâ–ˆ    â–ˆâ–ˆ        â–ˆâ–ˆ       â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–€â–€â–€â–€â–€â–€    â–„â–ˆâ–ˆâ–„      â–ˆâ–ˆ       â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ    â–ˆâ–ˆ    â–ˆâ–ˆ  â–ˆâ–ˆ    â–ˆâ–ˆ    â–ˆâ–ˆ         â–ˆâ–ˆ     â–ˆâ–ˆ    â–ˆâ–ˆ  â–ˆâ–ˆâ–€â–€â–€â–€â–€â–€
#  â–„â–„â–„â–ˆâ–ˆâ–„â–„â–„  â–ˆâ–ˆ    â–ˆâ–ˆ  â–ˆâ–„â–„â–„â–„â–„â–ˆâ–ˆ    â–ˆâ–ˆâ–„â–„â–„   â–ˆâ–ˆâ–„â–„â–„â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–„â–„â–„     â–ˆâ–ˆâ–„â–„â–„             â–€â–ˆâ–ˆâ–„â–„â–„â–„â–ˆ   â–„â–ˆâ–€â–€â–ˆâ–„     â–ˆâ–ˆâ–„â–„â–„             â–€â–ˆâ–ˆâ–„â–„â–ˆâ–ˆâ–€  â–ˆâ–ˆ    â–ˆâ–ˆ    â–ˆâ–ˆâ–„â–„â–„   â–„â–„â–„â–ˆâ–ˆâ–„â–„â–„  â–ˆâ–ˆ    â–ˆâ–ˆ  â–€â–ˆâ–ˆâ–„â–„â–„â–„â–ˆ
#  â–€â–€â–€â–€â–€â–€â–€â–€  â–€â–€    â–€â–€   â–€â–€â–€â–€â–€â–€      â–€â–€â–€â–€    â–€â–€â–€â–€ â–€â–€     â–€â–€â–€â–€      â–€â–€â–€â–€               â–€â–€â–€â–€â–€   â–€â–€â–€  â–€â–€â–€     â–€â–€â–€â–€               â–€â–€â–€â–€    â–€â–€    â–€â–€     â–€â–€â–€â–€   â–€â–€â–€â–€â–€â–€â–€â–€  â–€â–€    â–€â–€    â–€â–€â–€â–€â–€
#
#
# --- DESCRIPTION --- #
# Installs VS Code extensions from a JSON file by combining with online extensions
# --- DEPENDENCIES --- #
# - code
# - jq
# - gum
# --- END SIGNATURE --- #

set -eo pipefail
trap 'exit 1' SIGUSR1

eval "$(include "lib/cmdarg.sh")"
eval "$(include "check-deps")"

checkDeps "$0"
cmdarg_info "header" "$(get-desc "$0")"
cmdarg_parse "$@"
# ---  Main script logic --- #
origin="${argv[0]}"

file="$(mktemp -t "XXXXXX.json")"
trap 'rm -f $file' EXIT

get-ext --overwrite "${file}" &>/dev/null

# NOTE: Returns True if file exists and is not empty.
if [[ ! -s "${origin}" ]]; then
  log-warning "No entries found in ${origin}"
  exit 0
fi

declare -a extensions
if [[ -s "${file}" ]]; then
  # Combine JSON files with only unique enteries as an array
  mapfile -t < <(jq -s '[.[][]] | unique | .[]' -r "${origin}" "${file}") || log-error "Failed to parse '${file}'"
else
  log-warning "No new entries found in ${file}"
  exit 0
fi

for extension in "${extensions[@]}"; do
  extensionName="$(echo "${extension}" | awk -F '.' '{print $2}')"

  log-info "Installing ${extensionName}..."
  if repeat-it --preserve "code --install-extension ${extension} --force"; then
    log-info "Installed ${extensionName}"
  fi
done

log-success "Installation Done ðŸš€"
