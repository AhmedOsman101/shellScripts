#!/usr/bin/env bash

set -eo pipefail

trap 'exit 1' SIGUSR1 # Terminate script on SIGUSR1

source cmdarg.sh

cmdarg_info "header" "Script for formatting on code changes uisng biome.js"

cmdarg "p?" "preset" "The files preset to watch" "std"

cmdarg_parse "$@"

preset=${cmdarg_cfg['preset']}

# Function to display help text
print_help() {
  cat <<EOF
Presets:
  std     : Use standard extensions (js, mjs, cjs, ts, mts, cts, json, jsonc) [default]
  react   : Use React extensions (js, mjs, cjs, ts, mts, cts, json, jsonc, jsx, tsx)
  vue     : Use Vue extensions (js, mjs, cjs, ts, mts, cts, json, jsonc, vue)
EOF
}

# Check if 'watchexec' is installed
if ! command -v watchexec &>/dev/null; then
  log-error "'watchexec' is not installed. Please install it to proceed."
fi

if [[ -z "${preset}" ]]; then
  presets=('std' 'vue' 'react')
  preset="$(gum choose --header "Choose a preset: " "${presets[@]}")"
fi

case "${preset}" in
'react')
  extensionsArray=(js mjs cjs ts mts cts json jsonc jsx tsx)
  ;;
'vue')
  extensionsArray=(js mjs cjs ts mts cts json jsonc vue)
  ;;
'std')
  extensionsArray=(js mjs cjs ts mts cts json jsonc)
  ;;
*)
  print_help
  log-error "Invalid preset: ${preset}"
  ;;
esac

# Build a comma-separated string of extensions
extensions=$(
  IFS=,
  echo "${extensionsArray[*]}"
)

watchexec -c --timings \
  --delay-run 1s \
  --debounce 5s \
  --exts "${extensions}" \
  biome check --fix --reporter=summary . &&
  exit 0 || exit $?
