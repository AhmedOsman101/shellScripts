#!/usr/bin/env bash

# --- SCRIPT SIGNATURE --- #
#
#                                                                 ▄▄▄▄      ██     ▄▄▄▄
#                                                                ██▀▀▀      ▀▀     ▀▀██
#   ██▄████   ▄████▄   ██▄████▄   ▄█████▄  ████▄██▄   ▄████▄   ███████    ████       ██       ▄████▄
#   ██▀      ██▄▄▄▄██  ██▀   ██   ▀ ▄▄▄██  ██ ██ ██  ██▄▄▄▄██    ██         ██       ██      ██▄▄▄▄██
#   ██       ██▀▀▀▀▀▀  ██    ██  ▄██▀▀▀██  ██ ██ ██  ██▀▀▀▀▀▀    ██         ██       ██      ██▀▀▀▀▀▀
#   ██       ▀██▄▄▄▄█  ██    ██  ██▄▄▄███  ██ ██ ██  ▀██▄▄▄▄█    ██      ▄▄▄██▄▄▄    ██▄▄▄   ▀██▄▄▄▄█
#   ▀▀         ▀▀▀▀▀   ▀▀    ▀▀   ▀▀▀▀ ▀▀  ▀▀ ▀▀ ▀▀    ▀▀▀▀▀     ▀▀      ▀▀▀▀▀▀▀▀     ▀▀▀▀     ▀▀▀▀▀
#
#
# --- DESCRIPTION --- #
# Renames a file
# --- DEPENDENCIES --- #
#
# --- END SIGNATURE --- #

set -eo pipefail

trap 'exit 1' SIGUSR1

eval "$(include "lib/cmdarg.sh")"

eval "$(include "lib/helpers.sh")"

eval "$(include "check-deps")"
checkDeps "$0"
# ---  Main script logic --- #
cmdarg_info "header" "$(get-desc "$0")"

cmdarg "f" "force" "Don't ask for confirmation"

cmdarg_parse "$@"

force="${cmdarg_cfg["force"]}"
old="${cmdarg_argv[0]}"
new="${cmdarg_argv[1]}"

if [[ -z "${old}" ]]; then
  log-error "Missing source file"
elif [[ -z "${new}" ]]; then
  log-error "Missing target file"
elif [[ ! -f "${old}" ]]; then
  log-error "Source file ${old} doesn't exist"
fi

declare -a cmdArray
oldDir="$(dirname "${old}")"
newDir="$(dirname "${new}")"
oldBase="$(basename "${old}")"
newBase="$(basename "${new}")"

if [[ "${force}" == "true" ]]; then
  cmdArray=(mvp -f "${old}")
else
  cmdArray=(mvp -i "${old}")
fi

if [[ "${oldDir}" != '.' && "${newDir}" == '.' ]]; then
  # if oldDir is a full path and newDir is the empty
  # renamefile /tmp/test/file.js file.ts
  cmdArray+=("${oldDir}/${newBase}")
elif [[ "${oldDir}" == "${newDir}" ]]; then
  # if oldDir matches newDir
  # renamefile /tmp/test/file.js /tmp/test/file.ts
  cmdArray+=("${new}")
elif [[ "${old}" == "${new}" ]]; then
  log-info "${old} and ${new} are the same file"
  log-debug "${oldBase} == ${newBase}"
  exit 0
else
  cmdArray+=("${new}")
fi

"${cmdArray[@]}" && log-success "Renamed ${oldBase} to ${newBase} successfully"
