#!/usr/bin/env bash

# --- SCRIPT SIGNATURE --- #
#
#                      ▄▄                                                ▄▄
#                      ██                                                ██
#   ██▄████  ████▄██▄  ██▄███▄    ██▄████   ▄█████▄  ██▄████▄   ▄█████▄  ██▄████▄
#   ██▀      ██ ██ ██  ██▀  ▀██   ██▀       ▀ ▄▄▄██  ██▀   ██  ██▀    ▀  ██▀   ██
#   ██       ██ ██ ██  ██    ██   ██       ▄██▀▀▀██  ██    ██  ██        ██    ██
#   ██       ██ ██ ██  ███▄▄██▀   ██       ██▄▄▄███  ██    ██  ▀██▄▄▄▄█  ██    ██
#   ▀▀       ▀▀ ▀▀ ▀▀  ▀▀ ▀▀▀     ▀▀        ▀▀▀▀ ▀▀  ▀▀    ▀▀    ▀▀▀▀▀   ▀▀    ▀▀
#
#
# --- DESCRIPTION --- #
#  Removes a branch locally and remotely
# --- DEPENDENCIES --- #
# - git
# --- END SIGNATURE --- #

set -eo pipefail

trap 'exit 1' SIGUSR1

eval "$(include "lib/helpers.sh")"

eval "$(include "check-deps")"
checkDeps "$0"
# ---  Main script logic --- #
is-git-repo

deleteRemote="false"
currentBranch="$(git_current_branch)"
declare -a branches targetBranches

branchList=$(
  git branch --list --format='%(refname:short)' --remote
  git branch --list --format='%(refname:short)'
)

branchList=$(
  printf '%s\n' "${branchList}" |
    sed -e 's|^origin/||g' -e 's|^origin$||g' |
    no-dups |
    trim |
    remove-blanks
)

branchesString="$(printf '%s\n' "${branchList}" | rg -v "${currentBranch}")" || log-error "No branches can be deleted"

mapfile -t branches <<<"${branchesString}"

if [[ -n "$1" ]]; then
  targetBranches=("$1")
else
  if ! output=$(gum choose --no-limit "${branches[@]}"); then
    terminate
  fi
  mapfile -t targetBranches <<<"${output}"
fi

# Normalize `origin/` input
for i in "${!targetBranches[@]}"; do
  targetBranches[i]=$(echo "${targetBranches[${i}]}" | replace "origin/" '' | trim)
done

for branch in "${targetBranches[@]}"; do
  if [[ "${branch}" == "${currentBranch}" ]]; then
    log-error "Cannot delete current branch: '${branch}'"
  fi

  if ! printf '%s\n' "${branches[@]}" | rg -qx "${branch}"; then
    log-error "No branch with the name '${branch}' was found!"
  fi
done

if [[ -n "$(git remote -v)" ]]; then
  gum confirm "Delete remote as well?" && deleteRemote="true"
fi

git branch -D "${targetBranches[@]}"

if [[ "${deleteRemote}" == "true" ]]; then
  for branch in "${targetBranches[@]}"; do
    git branch -D --remote "origin/${branch}" 2>/dev/null ||
      log-warning "Branch '${branch}' doesn't have a remote"
  done
fi

exit 0
