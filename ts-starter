#!/usr/bin/env bash

# --- SCRIPT SIGNATURE --- #
#
#
#    ██                                      ██                            ██
#  ███████   ▄▄█████▄            ▄▄█████▄  ███████    ▄█████▄   ██▄████  ███████    ▄████▄    ██▄████
#    ██      ██▄▄▄▄ ▀            ██▄▄▄▄ ▀    ██       ▀ ▄▄▄██   ██▀        ██      ██▄▄▄▄██   ██▀
#    ██       ▀▀▀▀██▄   █████     ▀▀▀▀██▄    ██      ▄██▀▀▀██   ██         ██      ██▀▀▀▀▀▀   ██
#    ██▄▄▄   █▄▄▄▄▄██            █▄▄▄▄▄██    ██▄▄▄   ██▄▄▄███   ██         ██▄▄▄   ▀██▄▄▄▄█   ██
#     ▀▀▀▀    ▀▀▀▀▀▀              ▀▀▀▀▀▀      ▀▀▀▀    ▀▀▀▀ ▀▀   ▀▀          ▀▀▀▀     ▀▀▀▀▀    ▀▀
#
#
# --- DESCRIPTION --- #
# Starter kit for typescript projects with formatter, editorconfig, and pre-commit hooks.
# Bootstrap typescript projects quickly, installs biome, husky, and editorconfig
# --- DEPENDENCIES --- #
# - npm | pnpm | bun | deno | yarn
# - gum
# - wget | curl
# - jq
# --- END SIGNATURE --- #

set -eo pipefail

trap 'exit 1' SIGUSR1

source check-deps
checkDeps "$0"
# ---  Main script logic --- #

# --- Utils --- #
terminate() {
  log-info "Program terminated" && exit 0
}

fetchRaw() {
  local repo="$1" file="$2" dest="$3" branch="${4:-main}"
  log-info "Fetching ${dest}..."

  if command -v wget >/dev/null 2>&1; then
    repeat-it "wget -O - 'https://raw.githubusercontent.com/${repo}/${branch}/${file}' >>${dest}"
  else
    repeat-it "curl -L -# 'https://raw.githubusercontent.com/${repo}/${branch}/${file}' >>${dest}"
  fi
}

fetchGist() {
  local url="$1" file="$2" dest="$3"
  log-info "Fetching ${dest}..."

  if command -v wget >/dev/null 2>&1; then
    repeat-it "wget -O - '${url}/${file}' >>${dest}"
  else
    repeat-it "curl -L -# '${url}/${file}' >>${dest}"
  fi
}

# --- Command handlers --- #
addScripts() {
  jq '.scripts += {
  "lint": "biome lint .",
  "format": "biome check --fix .",
  "format:unsafe": "biome check --fix --unsafe .",
  "prepare": "husky || true"
}' package.json >tmp.json && mv tmp.json package.json
}

addTasks() {
  local file=${1:-deno.json}
  jq '.tasks += {
  "lint": "deno run -A npm:@biomejs/biome lint .",
  "format": "deno run -A npm:@biomejs/biome check --fix .",
  "format:unsafe": "deno run -A npm:@biomejs/biome check --fix --unsafe .",
  "prepare": "husky || true"
}' "${file}" >tmp.json && mv tmp.json "${file}"
}

# --- Package manager handlers --- #
handleNpm() {
  npm install -D -E '@biomejs/biome@2.0.5'
  if is-git-repo --safe >/dev/null 2>&1; then
    npm install --save-dev husky &&
      npx husky init
  fi

  addScripts
}

handlePnpm() {
  pnpm add -D -E '@biomejs/biome@2.0.5'
  if is-git-repo --safe >/dev/null 2>&1; then
    pnpm add --save-dev husky &&
      pnpm exec husky init
  fi

  addScripts
  pnpm approve-builds
}

handleYarn() {
  yarn add -D -E '@biomejs/biome@2.0.5'
  if is-git-repo --safe >/dev/null 2>&1; then
    yarn add --dev husky && {
      npx husky init || log-error "See the docs for husky at https://typicode.github.io/husky/get-started.html"
    }
  fi

  addScripts
}

handleBun() {
  bun add -D -E '@biomejs/biome@2.0.5'
  if is-git-repo --safe >/dev/null 2>&1; then
    bun add --dev husky &&
      bunx husky init
  fi

  addScripts
}

handleDeno() {
  deno add -D 'npm:@biomejs/biome@2.0.5'
  if is-git-repo --safe >/dev/null 2>&1; then
    deno add --dev npm:husky
    if [[ ! -f "package.json" ]]; then
      touch "package.json"
      deno run -A husky init
      rm "package.json"
    else
      deno run -A husky init
    fi
  fi

  if [[ -f "deno.json" ]]; then
    addTasks "deno.json"
  elif [[ -f "deno.jsonc" ]]; then
    addTasks "deno.jsonc"
  else
    addScripts
  fi
}

if [[ -n "$1" ]]; then
  cmd="$1"
else
  cmd=$(gum input --placeholder="Enter your starter command...")
  cmd=$(eval echo "${cmd}")
fi

[[ -z "${cmd}" ]] && log-error "Empty commands aren't allowed"

pkgMgr=$(echo "${cmd}" | awk '{print $1}')

if ! command -v "${pkgMgr}" >/dev/null 2>&1; then
  log-error "The package manager '${pkgMgr}' is not installed"
fi

eval "${cmd}" || terminate

case "${pkgMgr}" in
npm | npx)
  pkgMgr="npm"
  handleNpm
  ;;
pnpm | pnpx)
  pkgMgr="pnpm"
  handlePnpm
  ;;
yarn) handleYarn ;;
deno) handleDeno ;;
bun | bunx)
  pkgMgr="bun"
  handleBun
  ;;
? | *) log-error "The package manager '${pkgMgr}' is not recognized" ;;
esac

mkdir -p .helix
mkdir -p .vscode
mkdir -p .husky
echo "" >".husky/pre-commit"

fetchRaw "AhmedOsman101/dotfiles" "Configs/biome/.config/biome.json" "biome.json"
fetchRaw "AhmedOsman101/dotfiles" "Configs/editorconfig/.config/.editorconfig" ".editorconfig"
fetchRaw "AhmedOsman101/shellScripts" "templates/pre-commit-${pkgMgr}.sh" ".husky/pre-commit"

fetchGist "https://gist.githubusercontent.com/AhmedOsman101/5254232eb2c72a626cf798002d16a255/raw/f9bd818e99ed9279f39b2ae5e0f1ad04aa47e180" "settings.json" ".vscode/settings.json"
fetchGist "https://gist.githubusercontent.com/AhmedOsman101/5254232eb2c72a626cf798002d16a255/raw/f9bd818e99ed9279f39b2ae5e0f1ad04aa47e180" "extensions.json" ".vscode/extensions.json"
fetchGist "https://gist.githubusercontent.com/AhmedOsman101/8617796a7f3ee422b095179621a3ba83/raw/afde6c65d797fc19cfadbd3999f8d9ba26ec8aa2" "languages.toml" ".helix/languages.toml"
